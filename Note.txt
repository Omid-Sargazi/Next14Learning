Routing Metadata
 Ensuring proper search engine optimization (SEO) is crucial for increasing visibility and attracting users.
 Next.js introduced the Metadata API which allows you to define metadata for each page.
 Metadata ensures accurate and relevant information is displayed when your pages abs shared or indexed.

 MetaData {
    Export a static metadata object 
    Export a dynamic generateMetadata function
 }

/////
Metadata rules

1- Both layout.js and page.js files can export metadata. if define in a layout, it applies to all pages in that layout, but it define in page, it applies only to that page 
2- MetaData is read in order, from the root level down to the final page level.
3- when there's metadata in multiple places for the same route, they get combined, but page metadata will replace layout metadata if they have the same properties. 

//////////////////////////Title metadata/////////////////////////////////

the title field's primary purpose is to define the document title
it can be either a string or an object==>{
    absolute:"we can set absolute from every page and it is preferable on default"
    default:"every name for CEO"
    template:"%s | name" // we can set %s from every page.tsx 
}


//////////////Navigation//////////
we manually entered the URLs in the browser's address bar to navigate to the different routes.

Users rely on elements like links to navigate
    1- Clicking on them or
    2- through programmatic navigation after completing an action

link Components Navigation 
To enable client-side navigation Next.js provides us with the link Components

the <Link> component is a React component the extends the HTML <a> element, and it's the primary way to navigate between routes in Next.js
To use it, we need to import it from "next/link/.

replace in the tag navigate into Home page.

we can use startsWith method for check whatever urls start with anything. 
const isActive = pathname.startsWith(link.href)
///////////////////////
////////////////Navigating Programmatically//////////////////
navigating to different route using the link components, we can Programmatically navigate to the specific route. 
 for this job we can use "useNavigate" from "next/navigation" and then use push, replace and back for navigation.
 
 /////////////////////////////Templates/////////////////////////////

 templates are similar to layouts in that they wrap each child layout or page, But with templates, when a user navigates between routes that share a template, a new instance of the component is mounted, DOM elements are recreated, state is not preserved,and effects are re-synchronized.
 A template can be defined by exporting a default React component from a template.js or template.tsx file.
 similar to layouts, template also should accept a children prop which will render the nested segments in the route. 